generator client {
  provider            = "prisma-client-js"
  previewFeatures     = ["tracing", "metrics", "fieldReference", "fullTextIndex"]
  // output          = "./generated" FIXME causes conflicts with /node_modules/.pnpm/@prisma+client@5.4.2_prisma@5.4.2/node_modules/.prisma/client/schema.prisma. Make sure to remove it
  formatGeneratedCode = false
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  particleUUID String? @unique

  userName String? @unique
  email    String  @unique

  name String
  // firstName String //TODO:
  // lastName String

  profileImage String?

  bio String? @db.String

  createdAt    DateTime          @default(now()) @db.Timestamp
  updatedAt    DateTime          @updatedAt @db.Timestamp
  OrderRequest TrainingRequest[]

  models        Model[]
  notifications Notification[]

  @@map("users")
}

enum Category {
  FeatureExtraction @map("Feature Extraction")
}

model Model {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?    @default("Trained by DecenterAI") // FIXME:
  category    Category[]

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  trainingRequestId String?          @db.ObjectId
  trainingRequest   TrainingRequest? @relation(fields: [trainingRequestId], references: [id])

  data DataStore

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  @@map("models")
}

enum IPFSProvider {
  LIGHTHOUSE
  IPFS
  INFURA
  S3
}

type DataStore {
  cid      String
  provider IPFSProvider @default(LIGHTHOUSE)
}

type ModelTrainConfig {
  trainScript  String
  inputArchive String
}

model TrainingRequest {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  inputs DataStore
  config ModelTrainConfig

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  Model Model[]

  @@map("training_requests")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  message   String
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  @@map("notifications")
}
