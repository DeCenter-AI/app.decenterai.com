generator client {
  provider            = "prisma-client-js"
  previewFeatures     = ["tracing", "metrics", "fieldReference", "fullTextIndex", "postgresqlExtensions"]
  output          = "./generated"
  formatGeneratedCode = false
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId

  userName String? @unique
  email    String? @unique

  name         String?
  profileImage String?

  createdAt    DateTime          @default(now()) @db.Timestamp
  updatedAt    DateTime          @updatedAt @db.Timestamp
  OrderRequest TrainingRequest[]

  models Model[]

  @@map("users")
}

enum Category {
  FeatureExtraction @map("Feature Extraction")
}

model Model {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String? @default("Trained by DecenterAI") //FIXME:
  category    Category[]

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])

  trainingRequestId String? @db.ObjectId
  trainingRequest   TrainingRequest? @relation(fields: [trainingRequestId], references: [id])

  data DataStore

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  @@map("models")
}

enum IPFSProvider {
  LIGHTHOUSE
  IPFS
  INFURA
  S3
}

type DataStore {
  cid      String
  provider IPFSProvider @default(LIGHTHOUSE)
}

model TrainingRequest {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId
  user   User? @relation(fields: [userId], references: [id])

  inputs DataStore

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  Model Model[]

  @@map("training_requests")
}
